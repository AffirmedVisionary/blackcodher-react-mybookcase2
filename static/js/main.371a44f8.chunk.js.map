{"version":3,"sources":["components/Header.js","components/Book.js","components/BookList.js","pages/About.js","App.js","serviceWorker.js","index.js"],"names":["Header","Fragment","className","to","Book","props","book","id","volumeInfo","title","authors","description","imageLinks","thumbnail","smallThumbnail","listPrice","saleInfo","src","alt","amount","onClick","addBook","defaultProps","BookList","books","map","key","About","App","useState","data","setBooks","newBookList","filter","console","log","exact","path","render","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"w/1EAkBeA,MAdf,WACI,OACI,kBAAC,IAAMC,SAAP,KACG,yBAAKC,UAAU,UACd,2CACA,kBAAC,IAAD,CAAMC,GAAG,IAAID,UAAU,YAAvB,QACA,kBAAC,IAAD,CAAMC,GAAG,eAAeD,UAAU,YAAlC,SACA,kBAAC,IAAD,CAAMC,GAAG,YAAYD,UAAU,YAA/B,YACA,gCCNNE,G,MAAO,SAACC,GAAW,IAAD,EAIdA,EAAMC,KAFPC,EAFe,EAEfA,GAFe,IAEXC,WAAaC,EAFF,EAEEA,MAAOC,EAFT,EAESA,QAASC,EAFlB,EAEkBA,YAFlB,IAE+BC,WAAYC,EAF3C,EAE2CA,UAAWC,EAFtD,EAEsDA,eAC5DC,EAHM,EAGhBC,SAAUD,UAyBd,OACI,yBAAKb,UAAU,QACX,4BAAKO,GACL,kCAAQC,GACR,yBAAKO,IAAMJ,GAAaC,EAAgBI,IAAKT,IAC7C,2BAAIM,GAAaA,EAAUI,QAC3B,2BAAIR,GACJ,4BAAQS,QAAS,kBAAMf,EAAMgB,QAAQZ,EAAOF,KAA5C,YAiBTH,EAAKkB,aAAc,CACfZ,QAAS,oBAIDN,QC9CAmB,EAXE,SAAClB,GAChB,OACE,6BACKA,EAAMmB,MAAMC,KAAI,SAAAnB,GAAI,OACxB,kBAAC,EAAD,CAAMoB,IAAKpB,EAAKC,GAAID,KAAMA,EAAMe,QAAShB,EAAMgB,e,cCYrCM,MAlBf,WACI,OACI,kBAAC,IAAM1B,SAAP,KACI,yBAAKC,UAAU,WACnB,yBAAKA,UAAU,aACb,uDACA,2EACA,wIACE,2IACJ,kBAAC,IAAD,CAAMC,GAAG,IAAID,UAAU,eACnB,4BAAQA,UAAU,eAAlB,yBCiDG0B,EAtDH,SAACvB,GAAW,IAAD,EACKwB,mBAASC,GADd,mBACdN,EADc,KACPO,EADO,KAGrB,SAASV,EAASZ,EAAOF,GACvB,IAAMyB,EAAcR,EAAMS,QAAO,SAAA3B,GAAI,OAAIA,EAAKC,KAAOA,KACrDwB,EAASC,GACXE,QAAQC,IAAR,mBAAwB1B,EAAxB,2BAAgDF,EAAhD,kBAEA,OACE,oCACA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAO6B,OAAK,EAACC,KAAK,IAAIC,OAAS,kBAC7B,kBAAC,IAAMrC,SAAP,KACE,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAUuB,MAAOA,EAAOH,QAASA,QAG/B,kBAAC,IAAD,CAAOe,OAAK,EAACC,KAAK,eAAeC,OAAS,kBAC9C,kBAAC,IAAMrC,SAAP,KACE,kBAAC,EAAD,MACA,kBAAC,EAAD,UAGE,kBAAC,IAAD,CAAOmC,OAAK,EAACC,KAAK,YAAYC,OAAS,kBAC3C,kBAAC,IAAMrC,SAAP,KACE,kBAAC,EAAD,aCtBUsC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASN,OACP,kBAAC,IAAMO,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLrB,QAAQqB,MAAMA,EAAMC,c","file":"static/js/main.371a44f8.chunk.js","sourcesContent":["import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport \"./header.css\"\r\n\r\nfunction Header() {\r\n    return(\r\n        <React.Fragment>\r\n           <div className=\"header\">\r\n            <h1>My Bookcase</h1>\r\n            <Link to='/' className=\"bookLink\">Home</Link>\r\n            <Link to=\"/pages/About\" className=\"bookLink\">About</Link>\r\n            <Link to=\"/bookcase\" className=\"bookLink\">Bookcase</Link>\r\n            <br></br>\r\n            </div>\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default Header","import React from 'react';\r\nimport '../components/book.css'\r\nimport PropTypes from 'prop-types'\r\n// import addBook from '../App'\r\n// import Book from '../models/books.json'\r\n\r\nconst Book = (props) => {\r\n\r\n    let {id, volumeInfo: {title, authors, description, imageLinks:{thumbnail, smallThumbnail}},\r\n        saleInfo:{listPrice}} \r\n        = props.book;\r\n   \r\n\r\n        // let amount = () => {\r\n        //     if (saleInfo.retailPrice) {\r\n        //         let amount = saleInfo.retailPrice.amount;\r\n        //         return amount\r\n        //     }else {\r\n        //         let amount = 'No Amount Set'; \r\n        //         return amount\r\n        //     }\r\n        // };\r\n \r\n        // let url = () => {\r\n        // if (imageLinks) {\r\n        //     let url = imageLinks.smallThumbnail;\r\n        //     return url;\r\n        // } else {\r\n        //     let url = 'image not available';\r\n        //     return url;\r\n        // }\r\n        // };\r\n        \r\n\r\n    return (\r\n        <div className='book'>\r\n            <h2>{title}</h2>\r\n            <h3>by {authors}</h3>\r\n            <img src= {thumbnail || smallThumbnail} alt={title}/>\r\n            <p>{listPrice && listPrice.amount}</p>\r\n            <p>{description}</p>\r\n            <button onClick={() => props.addBook(title, id)}>Add +</button>\r\n        </div>\r\n    );\r\n}\r\n\r\nBook.propTypes = {\r\n    volumeInfo: PropTypes.shape(\r\n        {title: PropTypes.string.isRequired,\r\n        authors: PropTypes.array,\r\n        description: PropTypes.string,\r\n        imageLinks: PropTypes.shape(\r\n            {thumbnail: PropTypes.string, \r\n            smallThumbnail: PropTypes.string})\r\n        }),\r\n        saleInfo: PropTypes.shape({listPrice: PropTypes.shape({amount: PropTypes.number})})\r\n   };\r\n\r\n   Book.defaultProps ={\r\n       authors: \"No Known Authors\"\r\n   }\r\n   \r\n\r\nexport default Book;","import React from 'react';\r\nimport Book from './Book';\r\n// import data from './models/books.json';\r\n// import logo from './logo.svg';\r\n// import './App.css';\r\n\r\nconst BookList = (props) => {\r\n  return (\r\n    <div>\r\n        {props.books.map(book => (\r\n     <Book key={book.id} book={book} addBook={props.addBook}/>\r\n        ))}\r\n    </div>\r\n  );\r\n}\r\n\r\n\r\nexport default BookList;","import React from 'react';\r\nimport { Link } from 'react-router-dom'\r\nimport '../pages/about.css'\r\n\r\nfunction About() {\r\n    return (\r\n        <React.Fragment>\r\n            <div className=\"aboutUs\">\r\n        <div className=\"hero-text\">\r\n          <h1>Welcome to the Bookcase</h1>\r\n          <h3>This application was made by Charlene Grant</h3>\r\n          <p>The app displays a list of books to the user and allows them to save their favourites to a local bookcase</p>\r\n            <p>Click on the Add button to save a book to your bookcase. You can also search by name, author and description</p>\r\n        <Link to=\"/\" className=\"aboutButton\">\r\n            <button className=\"aboutButton\">Look For A Book!</button>\r\n        </Link>\r\n      </div>\r\n      </div>\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default About","import React, { useState } from 'react';\r\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\r\nimport Header from './components/Header';\r\nimport BookList from './components/BookList';\r\nimport data from './models/books.json';\r\nimport About from './pages/About'\r\n// import logo from './logo.svg';\r\n// import './App.css';\r\n\r\nconst App = (props) => {\r\n  const [books, setBooks] = useState(data);\r\n  \r\n  function addBook (title, id) {\r\n    const newBookList = books.filter(book => book.id !== id);\r\n    setBooks(newBookList)\r\n  console.log(`The Book ${title} with the id of ${id} was clicked.`);\r\n }\r\n  return (\r\n    <>\r\n    <Router>\r\n      <Route exact path=\"/\" render= {() => (\r\n        <React.Fragment>\r\n          <Header />\r\n          <BookList books={books} addBook={addBook} />\r\n        </React.Fragment>\r\n      )} />\r\n            <Route exact path=\"/pages/About\" render= {() => (\r\n        <React.Fragment>\r\n          <Header /> \r\n          <About />\r\n        </React.Fragment>\r\n      )} />\r\n            <Route exact path=\"/bookcase\" render= {() => (\r\n        <React.Fragment>\r\n          <Header />\r\n        </React.Fragment>\r\n      )} />\r\n    </Router>\r\n    </>\r\n  )\r\n }\r\n\r\n// function App() {\r\n//   return (\r\n//     <div className=\"App\">\r\n//       <header className=\"App-header\">\r\n//         <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n//         <p>\r\n//           Edit <code>src/App.js</code> and save to reload.\r\n//         </p>\r\n//         <a\r\n//           className=\"App-link\"\r\n//           href=\"https://reactjs.org\"\r\n//           target=\"_blank\"\r\n//           rel=\"noopener noreferrer\"\r\n//         >\r\n//           Learn React\r\n//         </a>\r\n//       </header>\r\n//     </div>\r\n//   );\r\n// }\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}